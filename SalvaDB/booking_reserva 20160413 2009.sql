--
-- Script was generated by Devart dbForge Studio for MySQL, Version 7.0.49.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 4/13/2016 8:09:23 PM
-- Server version: 5.5.5-10.1.10-MariaDB
-- Client version: 4.1
--


--
-- Definition for database booking_reserva
--
DROP DATABASE IF EXISTS booking_reserva;
CREATE DATABASE booking_reserva
CHARACTER SET utf8
COLLATE utf8_general_ci;

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

-- 
-- Set default database
--
USE booking_reserva;

--
-- Definition for table ciudad
--
CREATE TABLE ciudad (
  IdCiudad int(2) NOT NULL AUTO_INCREMENT,
  Name varchar(80) NOT NULL,
  PRIMARY KEY (IdCiudad),
  UNIQUE INDEX Name (Name)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 2340
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table operador
--
CREATE TABLE operador (
  IdOperador int(2) NOT NULL AUTO_INCREMENT,
  Nombre varchar(80) NOT NULL,
  PassWord varchar(20) NOT NULL,
  Correo varchar(40) NOT NULL,
  Telefono varchar(60) NOT NULL,
  Permisos smallint(6) NOT NULL DEFAULT 0,
  Ganacia decimal(10, 2) NOT NULL DEFAULT 20.00,
  PRIMARY KEY (IdOperador),
  UNIQUE INDEX Telefono (Telefono)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 4096
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table pais
--
CREATE TABLE pais (
  IdPais int(2) NOT NULL AUTO_INCREMENT,
  Nombre varchar(40) CHARACTER SET utf8 COLLATE utf8_german2_ci NOT NULL,
  PRIMARY KEY (IdPais),
  UNIQUE INDEX Nombre (Nombre)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 2048
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table reserva_estado
--
CREATE TABLE reserva_estado (
  IdReservaEstado int(2) NOT NULL AUTO_INCREMENT,
  Nombre varchar(60) NOT NULL,
  PRIMARY KEY (IdReservaEstado)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 4096
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table reserva_tipo
--
CREATE TABLE reserva_tipo (
  IdReservaTipo int(2) NOT NULL AUTO_INCREMENT,
  Nombre varchar(60) NOT NULL,
  PRIMARY KEY (IdReservaTipo)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 8192
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table casa
--
CREATE TABLE casa (
  IdCasa int(2) NOT NULL AUTO_INCREMENT,
  IdCiudad int(2) NOT NULL,
  Propietario varchar(255) NOT NULL,
  Telef varchar(255) NOT NULL,
  Habitaciones int(2) NOT NULL DEFAULT 1,
  Personas int(2) NOT NULL DEFAULT 1,
  PrecioHab decimal(10, 2) NOT NULL DEFAULT 20.00,
  ComisionHab decimal(10, 2) NOT NULL DEFAULT 5.00,
  Direccion varchar(255) NOT NULL,
  Notas varchar(255) NOT NULL,
  PRIMARY KEY (IdCasa),
  CONSTRAINT FK_casa_ciudad_IdCiudad FOREIGN KEY (IdCiudad)
  REFERENCES ciudad (IdCiudad) ON DELETE NO ACTION ON UPDATE NO ACTION
)
ENGINE = INNODB
AVG_ROW_LENGTH = 4096
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table reserva
--
CREATE TABLE reserva (
  IdReserva int(11) NOT NULL AUTO_INCREMENT,
  IdOperador int(2) NOT NULL,
  IdReservaTipo int(2) NOT NULL,
  IdReservaEstado int(2) NOT NULL,
  IdPais int(2) NOT NULL,
  Nombre varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  Correo varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  FechaReserv date NOT NULL,
  FechaEntrada date NOT NULL,
  Noches int(2) UNSIGNED NOT NULL DEFAULT 1,
  Personas int(2) UNSIGNED NOT NULL DEFAULT 1,
  Habitaciones int(2) UNSIGNED NOT NULL DEFAULT 1,
  Trasfer tinyint(1) NOT NULL DEFAULT 0,
  Deposito decimal(10, 2) UNSIGNED NOT NULL DEFAULT 0.00,
  VueloInfo varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  Observ varchar(512) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  Hora time NOT NULL,
  PRIMARY KEY (IdReserva),
  CONSTRAINT FK_reserva_operador_IdOperador FOREIGN KEY (IdOperador)
  REFERENCES operador (IdOperador) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT FK_reserva_pais_IdPais FOREIGN KEY (IdPais)
  REFERENCES pais (IdPais) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT FK_reserva_reserva_estado_IdReservaEstado FOREIGN KEY (IdReservaEstado)
  REFERENCES reserva_estado (IdReservaEstado) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT FK_reserva_reserva_tipo_IdReservaTipo FOREIGN KEY (IdReservaTipo)
  REFERENCES reserva_tipo (IdReservaTipo) ON DELETE NO ACTION ON UPDATE NO ACTION
)
ENGINE = INNODB
AVG_ROW_LENGTH = 5461
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table casa_ocupada
--
CREATE TABLE casa_ocupada (
  IdCasa int(2) NOT NULL,
  FechaIni date NOT NULL,
  FechaFin date NOT NULL,
  HabLibres int(2) NOT NULL DEFAULT 0,
  PRIMARY KEY (IdCasa, FechaIni),
  CONSTRAINT FK_casa_ocupada_casa_IdCasa FOREIGN KEY (IdCasa)
  REFERENCES casa (IdCasa) ON DELETE CASCADE ON UPDATE NO ACTION
)
ENGINE = INNODB
AVG_ROW_LENGTH = 2340
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table reserva_casa
--
CREATE TABLE reserva_casa (
  IdReserva int(11) NOT NULL,
  IdCasa int(2) NOT NULL,
  DiaEntrada int(2) NOT NULL DEFAULT 1,
  DiaSalida int(2) NOT NULL,
  Personas int(2) NOT NULL DEFAULT 1,
  Habitaciones int(2) NOT NULL DEFAULT 1,
  PrecioAcordado decimal(10, 2) UNSIGNED NOT NULL DEFAULT 0.00,
  ComisionAcordada decimal(10, 2) UNSIGNED NOT NULL DEFAULT 0.00,
  DineroCobrado decimal(10, 2) UNSIGNED NOT NULL DEFAULT 0.00,
  CopiaProp tinyint(1) NOT NULL DEFAULT 0,
  Observ varchar(512) NOT NULL,
  Confirnada tinyint(1) NOT NULL,
  Depositado decimal(10, 2) UNSIGNED NOT NULL DEFAULT 0.00,
  PRIMARY KEY (IdReserva, IdCasa, DiaEntrada),
  CONSTRAINT FK_reserva_casa_casa_IdCasa FOREIGN KEY (IdCasa)
  REFERENCES casa (IdCasa) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT FK_reserva_casa_reserva_IdReserva FOREIGN KEY (IdReserva)
  REFERENCES reserva (IdReserva) ON DELETE CASCADE ON UPDATE NO ACTION
)
ENGINE = INNODB
AVG_ROW_LENGTH = 8192
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

DELIMITER $$

--
-- Definition for procedure AddCasa
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE AddCasa (IN pIdCiudad int(2), IN pPropietario varchar(80), IN pTelef varchar(80), IN pHabitaciones int(2), IN pPersonas int(2), IN pPrecioHab numeric(10, 2), IN pComisionHab numeric(10, 2), IN pDireccion varchar(255), IN pNotas varchar(255))
BEGIN
  INSERT INTO casa (IdCiudad, Propietario, Telef, Habitaciones, Personas, PrecioHab, ComisionHab, Direccion, Notas)
    VALUES (pIdCiudad, pPropietario, pTelef, pHabitaciones, pPersonas, pPrecioHab, pComisionHab, pDireccion, pNotas);
END
$$

--
-- Definition for procedure AddCasaReserva
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE AddCasaReserva (pIdRes int, pIdCasa int(2), pDiaIn int(2), pDiaOut int(2), pPersonas int(2), pHabit int(2), pPrecio numeric(8, 2), pComision numeric(8, 2), pCobrado numeric(8, 2), pCopiaProp bool, pConfirnada bool, pObserv varchar(255), pDepositado numeric(8, 2))
BEGIN
  INSERT INTO reserva_casa (IdReserva, IdCasa, DiaEntrada, DiaSalida, Personas, Habitaciones, PrecioAcordado, ComisionAcordada, DineroCobrado, CopiaProp, Observ, Confirnada, Depositado)
    VALUES (pIdRes, pIdCasa, pDiaIn, pDiaOut, pPersonas, pHabit, pPrecio, pComision, pCobrado, pCopiaProp, pObserv, pConfirnada, pDepositado);

  UPDATE reserva
  SET IdReservaEstado = 2
  WHERE IdReserva = pIdRes;

END
$$

--
-- Definition for procedure AddLocalidad
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE AddLocalidad (IN pName varchar(80))
BEGIN
  INSERT INTO ciudad (Name)
    VALUES (pName);
END
$$

--
-- Definition for procedure AddOperador
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE AddOperador (pNombre varchar(80), pPassWord varchar(20), pCorreo varchar(40), pTelefono varchar(60), pPermisos int(6), pGanacia numeric(10, 2))
BEGIN
  INSERT INTO operador (Nombre, PassWord, Correo, Telefono, Permisos, Ganacia)
    VALUES (pNombre, pPassWord, pCorreo, pTelefono, pPermisos, pGanacia);
END
$$

--
-- Definition for procedure AddPais
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE AddPais (IN PaisName varchar(40))
BEGIN

  INSERT INTO pais (Nombre)
    VALUES (PaisName);

END
$$

--
-- Definition for procedure AddReserva
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE AddReserva (IN Operador int(2), IN Tipo int(2), IN Pais int(2), IN Nombre varchar(255), IN Correo varchar(255), IN Entrada date, IN Noches int(2), IN Personas int(2), IN Cuartos int(2), IN Tranfer tinyint(1), IN Deposito decimal(10, 2), IN VueloInfo varchar(255), IN Observ varchar(255))
BEGIN

  DECLARE hoy date;
  DECLARE tm time;

  SET hoy = CURRENT_DATE();
  SET tm = CURRENT_TIME();

  INSERT INTO reserva (IdOperador, IdReservaTipo, IdPais, IdReservaEstado, Nombre, Correo, FechaReserv, FechaEntrada, Noches, Personas, Habitaciones, Trasfer, Deposito, VueloInfo, Observ, Hora)
    VALUES (operador, Tipo, pais, 1, Nombre, Correo, hoy, Entrada, Noches, Personas, Cuartos, Tranfer, Deposito, VueloInfo, Observ, tm);

  SELECT
    reserva.IdReserva
  FROM reserva
  WHERE reserva.FechaReserv = hoy
  AND reserva.FechaEntrada = Entrada
  AND reserva.Correo = Correo
  AND reserva.Nombre = Nombre;

END
$$

--
-- Definition for procedure CasaDatos
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE CasaDatos (IN pIdCasa int(2))
BEGIN
  SELECT
    casa.IdCasa,
    casa.IdCiudad,
    casa.Propietario,
    casa.Telef,
    casa.Habitaciones,
    casa.Personas,
    casa.PrecioHab,
    casa.ComisionHab,
    casa.Direccion,
    casa.Notas
  FROM casa
  WHERE casa.IdCasa = pIdCasa;
END
$$

--
-- Definition for procedure DeleteCasa
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE DeleteCasa (pIdCasa int(2))
BEGIN
  DELETE
    FROM casa
  WHERE IdCasa = pIdCasa;
END
$$

--
-- Definition for procedure DeleteCasaOcupada
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE DeleteCasaOcupada (pIdCasa int(2), pFechaIni date)
BEGIN
  DELETE
    FROM casa_ocupada
  WHERE IdCasa = pIdCasa
    AND FechaIni = pFechaIni;
END
$$

--
-- Definition for procedure DeleteCasaReserva
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE DeleteCasaReserva (pIdRes int, pIdCasa int(2), pDiaIn int(2))
BEGIN
  DELETE
    FROM reserva_casa
  WHERE IdReserva = pIdRes
    AND IdCasa = pIdCasa
    AND DiaEntrada = pDiaIn
  ;
END
$$

--
-- Definition for procedure DeleteOldsCasas
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE DeleteOldsCasas ()
BEGIN
  DECLARE date_start date;
  SET date_start = CURRENT_DATE();

  DELETE
    FROM casa_ocupada
  WHERE FechaFin < date_start;

END
$$

--
-- Definition for procedure DeleteOperador
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE DeleteOperador (pIdOperador int(2))
BEGIN
  DELETE
    FROM operador
  WHERE IdOperador = pIdOperador;
END
$$

--
-- Definition for procedure FilterCasas
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE FilterCasas (IN pFechaIni date, IN pNDias int(2), IN pPropietario varchar(255), IN pLocalidad int(2), IN pCuartos int(2))
BEGIN

  DECLARE pFechaEnd date;
  DECLARE SkipProp bool;

  SET pFechaEnd = DATE_ADD(pFechaIni, INTERVAL pNDias DAY);

  IF ISNULL(pPropietario)
    OR LENGTH(pPropietario) = 0 THEN
    SET SkipProp = TRUE;
  ELSE
    SET SkipProp = FALSE;
  END IF;

  SELECT
    casa.IdCasa,
    casa.IdCiudad,
    casa.Propietario,
    casa.Telef,
    casa.Habitaciones,
    casa.Personas,
    casa.PrecioHab AS Precio,
    casa.ComisionHab AS Comision,
    ciudad.Name AS Localidad,
    casa.Direccion,
    casa.Notas,
	CasaYaReservada(casa.IdCasa, pFechaIni, pFechaEnd) as enUso
  FROM casa
    INNER JOIN ciudad
      ON casa.IdCiudad = ciudad.IdCiudad
  WHERE NOT CasaOcupada(casa.IdCasa, pFechaIni, pFechaEnd, pCuartos)
  /*AND NOT CasaYaReservada(casa.IdCasa, pFechaIni, pFechaEnd)*/
  AND (SkipProp = TRUE
  OR casa.Propietario LIKE pPropietario)
  AND (pLocalidad <= 0
  OR casa.IdCiudad = pLocalidad)
  AND (pCuartos <= 0
  OR casa.Habitaciones >= pCuartos)
  ORDER BY casa.Propietario
  ;

END
$$

--
-- Definition for procedure ListCasasPorReserva
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE ListCasasPorReserva (IN pIdReserva int)
BEGIN
  SELECT
    ciudad.Name AS Localidad,
    casa.Propietario,
    casa.Telef,
    casa.Notas,
    reserva_casa.*
  FROM reserva_casa
    INNER JOIN casa
      ON reserva_casa.IdCasa = casa.IdCasa
    INNER JOIN ciudad
      ON casa.IdCiudad = ciudad.IdCiudad
  WHERE reserva_casa.IdReserva = pIdReserva
  ORDER BY reserva_casa.DiaEntrada;

END
$$

--
-- Definition for procedure Login
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Login (IN Name varchar(80), IN Password varchar(30))
BEGIN
  SELECT
    operador.IdOperador,
    operador.Nombre,
    operador.Permisos,
    operador.Ganacia,
    operador.Telefono,
    operador.Correo
  FROM operador
  WHERE operador.Nombre = Name
  AND operador.PassWord = Password;
END
$$

--
-- Definition for procedure MarkCasaOcupada
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE MarkCasaOcupada (pIdCasa int(2), pFechaIni date, pFechaFin date, pHabLibres int(2))
BEGIN
  INSERT INTO casa_ocupada (IdCasa, FechaIni, FechaFin, HabLibres)
    VALUES (pIdCasa, pFechaIni, pFechaFin, pHabLibres);
END
$$

--
-- Definition for procedure ModifyCasa
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE ModifyCasa (IN pIdCasa int(2), IN pIdCiudad int(2), IN pPropietario varchar(80), IN pTelef varchar(80), IN pHabitaciones int(2), IN pPersonas int(2), IN pPrecioHab numeric(10, 2), IN pComisionHab numeric(10, 2), IN pDireccion varchar(255), IN pNotas varchar(255))
BEGIN
  UPDATE casa
  SET IdCiudad = pIdCiudad,
      Propietario = pPropietario,
      Telef = pTelef,
      Habitaciones = pHabitaciones,
      Personas = pPersonas,
      PrecioHab = pPrecioHab,
      ComisionHab = pComisionHab,
      Direccion = pDireccion,
      Notas = pNotas
  WHERE IdCasa = pIdCasa;

END
$$

--
-- Definition for procedure ModifyCasaReserva
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE ModifyCasaReserva (pDiaInNow int(2), pIdRes int, pIdCasa int(2), pDiaIn int(2), pDiaOut int(2), pPersonas int(2), pHabit int(2), pPrecio numeric(8, 2), pComision numeric(8, 2), pCobrado numeric(8, 2), pCopiaProp bool, pConfirnada bool, pObserv varchar(255), pDepositado numeric(8, 2))
BEGIN
  DECLARE existe bool;

  IF pDiaInNow != pDiaIn THEN
    SET existe = ExistReservaCasa(pIdRes, pIdCasa, pDiaInNow);
  END IF;

  IF ISNULL(existe) THEN
    UPDATE reserva_casa
    SET DiaEntrada = pDiaIn,
        DiaSalida = pDiaOut,
        Personas = pPersonas,
        Habitaciones = pHabit,
        PrecioAcordado = pPrecio,
        ComisionAcordada = pComision,
        DineroCobrado = pCobrado,
        CopiaProp = pCopiaProp,
        Observ = pObserv,
        Confirnada = pConfirnada,
        Depositado = pDepositado
    WHERE IdReserva = pIdRes
    AND IdCasa = pIdCasa
    AND DiaEntrada = pDiaInNow;

    UPDATE reserva
    SET IdReservaEstado = 2
    WHERE IdReserva = pIdRes;

  ELSE
    IF NOT ExistReservaCasa(pIdRes, pIdCasa, pDiaIn) THEN
      DELETE
        FROM reserva_casa
      WHERE IdReserva = pIdRes
        AND IdCasa = pIdCasa
        AND DiaEntrada = pDiaInNow;
    END IF;
    CALL AddCasaReserva(pIdRes, pIdCasa, pDiaIn, pDiaOut, pPersonas, pHabit, pPrecio, pComision, pCobrado, pCopiaProp, pConfirnada, pObserv);
  END IF;

END
$$

--
-- Definition for procedure ModifyOperador
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE ModifyOperador (pIdOperador int(2), pNombre varchar(80), pPassWord varchar(20), pCorreo varchar(40), pTelefono varchar(60), pPermisos int(6), pGanacia numeric(10, 2))
BEGIN
  UPDATE operador
  SET Nombre = pNombre,
      PassWord = pPassWord,
      Correo = pCorreo,
      Telefono = pTelefono,
      Permisos = pPermisos,
      Ganacia = pGanacia
  WHERE IdOperador = pIdOperador;
END
$$

--
-- Definition for procedure ModifyReserva
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE ModifyReserva (pIdReserv int, pTipo int(2), IN pPais int(2), IN pNombre varchar(255), IN pCorreo varchar(255), IN pEntrada date, IN pNoches int(2), IN pPersonas int(2), IN pCuartos int(2), IN pTranfer tinyint(1), IN pDeposito decimal(10, 2), IN pVueloInfo varchar(255), IN pObserv varchar(255))
BEGIN
  UPDATE reserva
  SET IdPais = pPais,
      Nombre = pNombre,
      Correo = pCorreo,
      IdReservaTipo = pTipo,
      FechaEntrada = pEntrada,
      Noches = pNoches,
      Personas = pPersonas,
      Habitaciones = pCuartos,
      Trasfer = pTranfer,
      Deposito = pDeposito,
      VueloInfo = pVueloInfo,
      Observ = pObserv
  WHERE reserva.IdReserva = pIdReserv;

END
$$

--
-- Definition for procedure OperadorDatos
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE OperadorDatos (pIdOperador int(2))
BEGIN
  SELECT
    operador.Nombre,
    operador.PassWord,
    operador.Correo,
    operador.Telefono,
    operador.Permisos,
    operador.Ganacia
  FROM operador
  WHERE operador.IdOperador = pIdOperador;
END
$$

--
-- Definition for procedure ReservaCasaDatos
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE ReservaCasaDatos (pIdReserva int, pIdCasa int(2), pDiaIni int(2))
BEGIN
  SELECT
    reserva_casa.DiaEntrada,
    reserva_casa.DiaSalida,
    reserva_casa.Personas,
    reserva_casa.Habitaciones,
    reserva_casa.PrecioAcordado,
    reserva_casa.ComisionAcordada,
    reserva_casa.DineroCobrado,
    reserva_casa.CopiaProp,
    reserva_casa.Observ,
    reserva_casa.Confirnada,
    casa.Propietario,
    reserva.FechaEntrada,
    reserva.IdOperador,
    reserva.IdReservaEstado,
    reserva_casa.Depositado,
    reserva.Noches
  FROM reserva_casa
    INNER JOIN casa
      ON reserva_casa.IdCasa = casa.IdCasa
    INNER JOIN reserva
      ON reserva_casa.IdReserva = reserva.IdReserva
  WHERE reserva_casa.IdReserva = pIdReserva
  AND reserva_casa.IdCasa = pIdCasa
  AND reserva_casa.DiaEntrada = pDiaIni
  ;

END
$$

--
-- Definition for procedure ReservaDatos
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE ReservaDatos (IN IdReserva int)
BEGIN
  SELECT
    reserva.IdReserva,
    reserva.IdReservaTipo AS IdTipo,
    reserva.IdPais,
    reserva.IdReservaEstado,
    reserva.Nombre,
    reserva.Correo,
    reserva.Noches,
    reserva.Personas,
    reserva.Habitaciones AS Cuartos,
    reserva.Trasfer,
    reserva.Deposito,
    reserva.VueloInfo,
    reserva.Observ,
    reserva.IdOperador,
    reserva.Hora,
    operador.Nombre AS Operador,
    reserva_estado.Nombre AS Estado,
    DAY(reserva.FechaEntrada) AS InDia,
    MONTH(reserva.FechaEntrada) AS InMes,
    YEAR(reserva.FechaEntrada) AS InAno,
    DAY(reserva.FechaReserv) AS ResDia,
    MONTH(reserva.FechaReserv) AS ResMes,
    YEAR(reserva.FechaReserv) AS ResAno
  FROM reserva
    INNER JOIN operador
      ON reserva.IdOperador = operador.IdOperador
    INNER JOIN reserva_estado
      ON reserva.IdReservaEstado = reserva_estado.IdReservaEstado
  WHERE reserva.IdReserva = IdReserva;
END
$$

--
-- Definition for procedure ReservaOperador
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE ReservaOperador (pMes int(2), pAño int(2))
BEGIN

  SELECT
    operador.IdOperador AS IdOperador,
    operador.Nombre AS Nombre,
    COUNT(view_reserva_group_casas.Reserva) AS Reservas,
    SUM(view_reserva_group_casas.NCasas) AS Casas,
    SUM(view_reserva_group_casas.Noches) AS Noches,
    SUM(view_reserva_group_casas.Personas) AS Personas,
    SUM(view_reserva_group_casas.Habitaciones) AS Cuartos,
    SUM(view_reserva_group_casas.Activa) AS Activas,
    SUM(view_reserva_group_casas.Terminada) AS Terminadas,
    SUM(view_reserva_group_casas.Cancelada) AS Canceladas
  FROM view_reserva_group_casas
    INNER JOIN operador
      ON view_reserva_group_casas.IdOperador = operador.IdOperador
  WHERE MONTH(view_reserva_group_casas.FechaEntrada) = pMes
  AND YEAR(view_reserva_group_casas.FechaEntrada) = pAño
  GROUP BY operador.IdOperador;

END
$$

--
-- Definition for procedure ReservasMesuales
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE ReservasMesuales (IN IdOperador int(2), IN pNMes int)
BEGIN
  DECLARE date_start date;
  DECLARE date_end date;

  SET date_start = DATE_ADD(CURRENT_DATE(), INTERVAL pNMes MONTH);
  SET date_end = DATE_ADD(date_start, INTERVAL 1 MONTH);

  SELECT
    reserva.IdReserva,
    reserva.Nombre,
    reserva.Correo,
    DATE_FORMAT(reserva.FechaReserv, '%d-%m-%y') AS fReserva,
    DATE_FORMAT(reserva.FechaEntrada, '%d-%m-%y') AS fEntrada,
    reserva.Noches,
    reserva.Personas,
    reserva.Habitaciones,
    reserva.Trasfer,
    reserva.Deposito,
    reserva.VueloInfo,
    reserva.Observ,
    reserva_tipo.Nombre AS Tipo,
    reserva_estado.Nombre AS Estado,
    reserva.IdOperador,
    pais.Nombre AS Pais
  FROM reserva
    INNER JOIN reserva_tipo
      ON reserva.IdReservaTipo = reserva_tipo.IdReservaTipo
    INNER JOIN reserva_estado
      ON reserva.IdReservaEstado = reserva_estado.IdReservaEstado
    INNER JOIN pais
      ON reserva.IdPais = pais.IdPais
  WHERE (IdOperador = 0
  || reserva.IdOperador = IdOperador)
  AND reserva.FechaEntrada BETWEEN date_start AND date_end
  ORDER BY reserva.FechaEntrada;

END
$$

--
-- Definition for procedure UpdateEstado
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE UpdateEstado (pCancelRows bool)
BEGIN
  DECLARE nEnProc int(2);
  DECLARE nTramit int(2);
  DECLARE nEnCurso int(2);
  DECLARE nConcl int(2);
  DECLARE nCobrad int(2);
  DECLARE nCancel int(2);
  DECLARE hoy date;

  SET hoy = CURRENT_DATE();

  UPDATE reserva_casa
  INNER JOIN reserva
    ON reserva_casa.IdReserva = reserva.IdReserva
  SET IdReservaEstado = 2
  WHERE IdReservaEstado < 2;

  SET nEnProc = ROW_COUNT();

  UPDATE reserva
  SET IdReservaEstado = 3
  WHERE IdReservaEstado < 3
  AND ReservaConfirmada(IdReserva);

  SET nTramit = ROW_COUNT();

  UPDATE reserva
  SET IdReservaEstado = 4
  WHERE IdReservaEstado = 3
  AND FechaEntrada < hoy;

  SET nEnCurso = ROW_COUNT();

  UPDATE reserva
  SET IdReservaEstado = 5
  WHERE IdReservaEstado = 4
  AND DATE_ADD(FechaEntrada, INTERVAL Noches DAY) < hoy;

  SET nConcl = ROW_COUNT();

  UPDATE reserva
  SET IdReservaEstado = 6
  WHERE ReservaCobrada(IdReserva);

  SET nCobrad = ROW_COUNT();

  IF pCancelRows THEN
    SELECT
      reserva.IdReserva,
      reserva.Correo,
      reserva.Nombre,
      pais.Nombre AS Pais,
      reserva.FechaEntrada,
      reserva.Noches,
      reserva.Personas,
      reserva.Habitaciones,
      reserva_estado.Nombre AS Estado
    FROM reserva
      INNER JOIN pais
        ON reserva.IdPais = pais.IdPais
      INNER JOIN reserva_estado
        ON reserva.IdReservaEstado = reserva_estado.IdReservaEstado
    WHERE reserva.IdReservaEstado < 3
    AND DATE_ADD(FechaEntrada, INTERVAL Noches DAY) < hoy;
  ELSE
    SELECT
      COUNT(*) INTO nCancel
    FROM reserva
    WHERE IdReservaEstado < 3
    AND DATE_ADD(FechaEntrada, INTERVAL Noches DAY) < hoy;

    SELECT
      nEnProc AS EnProceso,
      nTramit AS Tramitada,
      nEnCurso AS EnCurso,
      nConcl AS Concluida,
      nCobrad AS Cobrada,
      nCancel AS ForCancel;
  END IF;

END
$$

--
-- Definition for function CasaOcupada
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION CasaOcupada (IdCasa int(2), FechaIni date, FechaFin date, Cuartos int(2))
RETURNS tinyint(1)
BEGIN

  DECLARE nOcup int;

  SELECT
    COUNT(*) INTO nOcup
  FROM casa_ocupada
  WHERE casa_ocupada.IdCasa = IdCasa
  AND casa_ocupada.FechaIni < FechaFin
  AND casa_ocupada.FechaFin > FechaIni
  AND casa_ocupada.HabLibres < Cuartos;

  IF nOcup > 0 THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
END
$$

--
-- Definition for function CasaYaReservada
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION CasaYaReservada (pIdCasa int(2), pFechaIni date, pFechaEnd date)
RETURNS tinyint(1)
BEGIN

  DECLARE nReserv int;

  SELECT
    COUNT(reserva_casa.IdReserva) INTO nReserv
  FROM reserva_casa
    INNER JOIN reserva
      ON reserva_casa.IdReserva = reserva.IdReserva
  WHERE reserva_casa.IdCasa = pIdCasa
  AND (DATE_ADD(reserva.FechaEntrada, INTERVAL reserva_casa.DiaEntrada + 1 DAY) BETWEEN pFechaIni AND pFechaEnd
  OR DATE_ADD(reserva.FechaEntrada, INTERVAL reserva_casa.DiaSalida - 1 DAY) BETWEEN pFechaIni AND pFechaEnd)
  ;

  IF nReserv > 0 THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;

END
$$

--
-- Definition for function CuartosLibres
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION CuartosLibres (pIdCasa int(2), pFechaIni date, pFechaEnd date)
RETURNS int(11)
BEGIN

  DECLARE nCuartos int;
  DECLARE nOcupados int;

  SET nCuartos = 0;
  SET nOcupados = 0;

  SELECT
    SUM(reserva_casa.Habitaciones) INTO nOcupados
  FROM reserva_casa
    INNER JOIN reserva
      ON reserva_casa.IdReserva = reserva.IdReserva
  WHERE reserva_casa.IdCasa = pIdCasa
  AND (DATE_ADD(reserva.FechaEntrada, INTERVAL reserva_casa.DiaEntrada + 1 DAY) BETWEEN pFechaIni AND pFechaEnd
  OR DATE_ADD(reserva.FechaEntrada, INTERVAL reserva_casa.DiaSalida - 1 DAY) BETWEEN pFechaIni AND pFechaEnd)
  GROUP BY IdCasa
  ;

  SELECT
    casa.Habitaciones INTO nCuartos
  FROM casa
  WHERE casa.IdCasa = pIdCasa;

  RETURN nCuartos - nOcupados;
END
$$

--
-- Definition for function ExistReservaCasa
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION ExistReservaCasa (pIdRes int, pIdCasa int(2), pDiaIn int(2))
RETURNS tinyint(1)
BEGIN

  DECLARE existe bool;

  SELECT
    TRUE INTO existe
  FROM reserva_casa
  WHERE reserva_casa.IdReserva = pIdRes
  AND reserva_casa.IdCasa = pIdCasa
  AND reserva_casa.DiaEntrada = pDiaIn;

  IF ISNULL(existe) THEN
    RETURN FALSE;
  ELSE
    RETURN TRUE;
  END IF;

END
$$

--
-- Definition for function ReservaCobrada
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION ReservaCobrada (pIdReserva int)
RETURNS tinyint(1)
BEGIN

  DECLARE aCobrar numeric(10, 2);
  DECLARE Pagado numeric(10, 2);

  SELECT
    SUM(ComisionAcordada * Habitaciones * (DiaSalida - DiaEntrada)),
    SUM(DineroCobrado) INTO aCobrar, Pagado
  FROM reserva_casa
  WHERE reserva_casa.IdReserva = pIdReserva;

  IF ISNULL(aCobrar)
    || aCobrar > Pagado THEN
    RETURN FALSE;
  ELSE
    RETURN TRUE;
  END IF;

END
$$

--
-- Definition for function ReservaConfirmada
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION ReservaConfirmada (pIdReserva int)
RETURNS tinyint(1)
BEGIN
  DECLARE nRows int;
  DECLARE nConf int;

  SELECT
    COUNT(*),
    SUM(reserva_casa.Confirnada) INTO nRows, nConf
  FROM reserva_casa
  WHERE reserva_casa.IdReserva = pIdReserva;

  IF nConf = nRows THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
END
$$

DELIMITER ;

--
-- Definition for view view_casa_reserva
--
CREATE OR REPLACE
DEFINER = 'root'@'localhost'
VIEW view_casa_reserva
AS
SELECT
  `reserva_casa`.`IdReserva` AS `IdReserva`,
  `reserva_casa`.`IdCasa` AS `IdCasa`,
  `casa`.`Propietario` AS `Propietario`,
  `casa`.`Telef` AS `Telef`,
  `ciudad`.`Name` AS `Localidad`,
  `reserva`.`Nombre` AS `Nombre`,
  `reserva`.`Correo` AS `Correo`,
  `pais`.`Nombre` AS `Pais`,
  `reserva_casa`.`DiaEntrada` AS `DiaEntrada`,
  (`reserva`.`FechaEntrada` + INTERVAL `reserva_casa`.`DiaEntrada` DAY) AS `Desde`,
  (`reserva`.`FechaEntrada` + INTERVAL `reserva_casa`.`DiaSalida` DAY) AS `Hasta`,
  `reserva_casa`.`Personas` AS `Personas`,
  `reserva_casa`.`Habitaciones` AS `Cuartos`,
  ((`reserva_casa`.`PrecioAcordado` * `reserva_casa`.`Habitaciones`) * (`reserva_casa`.`DiaSalida` - `reserva_casa`.`DiaEntrada`)) AS `Precio`
FROM ((((`reserva_casa`
  JOIN `casa`
    ON ((`reserva_casa`.`IdCasa` = `casa`.`IdCasa`)))
  JOIN `ciudad`
    ON ((`casa`.`IdCiudad` = `ciudad`.`IdCiudad`)))
  JOIN `reserva`
    ON ((`reserva_casa`.`IdReserva` = `reserva`.`IdReserva`)))
  JOIN `pais`
    ON ((`reserva`.`IdPais` = `pais`.`IdPais`)));

--
-- Definition for view view_casa_reserva_inform
--
CREATE OR REPLACE
DEFINER = 'root'@'localhost'
VIEW view_casa_reserva_inform
AS
SELECT
  `reserva_casa`.`IdReserva` AS `IdReserva`,
  `reserva_casa`.`IdCasa` AS `IdCasa`,
  `casa`.`Propietario` AS `Propietario`,
  `casa`.`Direccion` AS `Direccion`,
  `ciudad`.`Name` AS `Localidad`,
  `reserva_casa`.`PrecioAcordado` AS `PrecioHab`,
  (`reserva_casa`.`DiaSalida` - `reserva_casa`.`DiaEntrada`) AS `Noches`,
  `reserva_casa`.`Habitaciones` AS `Cuartos`,
  `reserva_casa`.`Depositado` AS `Pagado`,
  ((`reserva_casa`.`PrecioAcordado` * `reserva_casa`.`Habitaciones`) * (`reserva_casa`.`DiaSalida` - `reserva_casa`.`DiaEntrada`)) AS `Precio`
FROM ((`reserva_casa`
  JOIN `casa`
    ON ((`reserva_casa`.`IdCasa` = `casa`.`IdCasa`)))
  JOIN `ciudad`
    ON ((`casa`.`IdCiudad` = `ciudad`.`IdCiudad`)));

--
-- Definition for view view_casas
--
CREATE OR REPLACE
DEFINER = 'root'@'localhost'
VIEW view_casas
AS
SELECT
  `casa`.`IdCasa` AS `IdCasa`,
  `casa`.`Propietario` AS `Propietario`,
  `casa`.`Telef` AS `Telef`,
  `ciudad`.`Name` AS `Localidad`,
  `casa`.`Personas` AS `Personas`,
  `casa`.`Habitaciones` AS `Cuartos`,
  `casa`.`PrecioHab` AS `Precio`,
  `casa`.`ComisionHab` AS `Comision`,
  `casa`.`Notas` AS `Notas`,
  `ciudad`.`IdCiudad` AS `IdCiudad`
FROM (`casa`
  JOIN `ciudad`
    ON ((`casa`.`IdCiudad` = `ciudad`.`IdCiudad`)));

--
-- Definition for view view_casas_pagos
--
CREATE OR REPLACE
DEFINER = 'root'@'localhost'
VIEW view_casas_pagos
AS
SELECT
  `casa`.`Propietario` AS `Propietario`,
  `casa`.`Telef` AS `Telef`,
  (`reserva`.`FechaEntrada` + INTERVAL `reserva_casa`.`DiaSalida` DAY) AS `Salida`,
  `reserva_casa`.`Personas` AS `Personas`,
  `reserva_casa`.`Habitaciones` AS `Habitaciones`,
  (`reserva_casa`.`DiaSalida` - `reserva_casa`.`DiaEntrada`) AS `nDias`,
  `casa`.`PrecioHab` AS `PrecioHab`,
  `casa`.`ComisionHab` AS `ComisionHab`,
  `reserva_casa`.`PrecioAcordado` AS `PrecioAcordado`,
  `reserva_casa`.`ComisionAcordada` AS `ComisionAcordada`,
  ((`reserva_casa`.`Habitaciones` * `casa`.`PrecioHab`) * (`reserva_casa`.`DiaSalida` - `reserva_casa`.`DiaEntrada`)) AS `PrecioEsp`,
  ((`reserva_casa`.`Habitaciones` * `casa`.`ComisionHab`) * (`reserva_casa`.`DiaSalida` - `reserva_casa`.`DiaEntrada`)) AS `ComisionEsp`,
  ((`reserva_casa`.`Habitaciones` * `reserva_casa`.`PrecioAcordado`) * (`reserva_casa`.`DiaSalida` - `reserva_casa`.`DiaEntrada`)) AS `PrecioReal`,
  ((`reserva_casa`.`Habitaciones` * `reserva_casa`.`ComisionAcordada`) * (`reserva_casa`.`DiaSalida` - `reserva_casa`.`DiaEntrada`)) AS `ComisionReal`,
  `reserva_casa`.`DineroCobrado` AS `Cobrado`,
  `reserva`.`IdReservaEstado` AS `IdReservaEstado`,
  `reserva`.`IdReservaTipo` AS `IdReservaTipo`,
  `reserva_casa`.`IdReserva` AS `IdReserva`,
  `reserva_casa`.`IdCasa` AS `IdCasa`
FROM ((`reserva_casa`
  JOIN `casa`
    ON ((`reserva_casa`.`IdCasa` = `casa`.`IdCasa`)))
  JOIN `reserva`
    ON ((`reserva_casa`.`IdReserva` = `reserva`.`IdReserva`)));

--
-- Definition for view view_reserva_group_casas
--
CREATE OR REPLACE
DEFINER = 'root'@'localhost'
VIEW view_reserva_group_casas
AS
SELECT
  `reserva`.`IdReserva` AS `Reserva`,
  COUNT(`reserva_casa`.`IdCasa`) AS `NCasas`,
  `reserva`.`IdOperador` AS `IdOperador`,
  `reserva`.`FechaEntrada` AS `FechaEntrada`,
  IF((`reserva`.`IdReservaEstado` < 6), 1, 0) AS `Activa`,
  IF((`reserva`.`IdReservaEstado` = 6), 1, 0) AS `Terminada`,
  IF((`reserva`.`IdReservaEstado` = 7), 1, 0) AS `Cancelada`,
  `reserva`.`Noches` AS `Noches`,
  `reserva`.`Personas` AS `Personas`,
  `reserva`.`Habitaciones` AS `Habitaciones`
FROM (`reserva`
  LEFT JOIN `reserva_casa`
    ON ((`reserva_casa`.`IdReserva` = `reserva`.`IdReserva`)))
GROUP BY `reserva`.`IdReserva`,
         `reserva`.`FechaEntrada`;

--
-- Definition for view view_reservas_pago
--
CREATE OR REPLACE
DEFINER = 'root'@'localhost'
VIEW view_reservas_pago
AS
SELECT
  `reserva`.`IdReserva` AS `IdReserva`,
  `reserva`.`Nombre` AS `Nombre`,
  `reserva`.`Correo` AS `Correo`,
  `pais`.`Nombre` AS `Pais`,
  (`reserva`.`FechaEntrada` + INTERVAL `reserva`.`Noches` DAY) AS `Salida`,
  COUNT(`reserva_casa`.`IdCasa`) AS `Casas`,
  `reserva`.`Noches` AS `Noches`,
  `reserva`.`Personas` AS `Personas`,
  `reserva`.`Habitaciones` AS `Cuartos`,
  FORMAT(AVG(`reserva_casa`.`PrecioAcordado`), 2) AS `PrecioProm`,
  FORMAT(AVG(`reserva_casa`.`ComisionAcordada`), 2) AS `ComisionProm`,
  SUM(((`reserva_casa`.`Habitaciones` * `reserva_casa`.`PrecioAcordado`) * (`reserva_casa`.`DiaSalida` - `reserva_casa`.`DiaEntrada`))) AS `Precio`,
  SUM(((`reserva_casa`.`Habitaciones` * `reserva_casa`.`ComisionAcordada`) * (`reserva_casa`.`DiaSalida` - `reserva_casa`.`DiaEntrada`))) AS `Comision`,
  SUM(`reserva_casa`.`DineroCobrado`) AS `Cobrado`,
  `reserva`.`Deposito` AS `Deposito`,
  `reserva`.`IdReservaEstado` AS `IdEstado`,
  `reserva`.`IdReservaTipo` AS `IdReservaTipo`,
  `reserva`.`IdPais` AS `IdPais`,
  `reserva_estado`.`Nombre` AS `Estado`
FROM (((`reserva_casa`
  JOIN `reserva`
    ON ((`reserva_casa`.`IdReserva` = `reserva`.`IdReserva`)))
  JOIN `pais`
    ON ((`reserva`.`IdPais` = `pais`.`IdPais`)))
  JOIN `reserva_estado`
    ON ((`reserva`.`IdReservaEstado` = `reserva_estado`.`IdReservaEstado`)))
GROUP BY `reserva`.`IdReserva`;

--
-- Definition for view view_resevas
--
CREATE OR REPLACE
DEFINER = 'root'@'localhost'
VIEW view_resevas
AS
SELECT
  `reserva`.`IdReserva` AS `IdReserva`,
  `reserva`.`IdOperador` AS `IdOperador`,
  `reserva`.`IdReservaTipo` AS `IdTipo`,
  `reserva`.`IdReservaEstado` AS `IdEstado`,
  `reserva`.`IdPais` AS `IdPais`,
  `operador`.`Nombre` AS `Operador`,
  `reserva`.`Nombre` AS `Nombre`,
  `reserva`.`Correo` AS `Correo`,
  `reserva`.`FechaEntrada` AS `Fecha`,
  `reserva`.`Noches` AS `Noches`,
  `reserva`.`Personas` AS `Personas`,
  `reserva`.`Habitaciones` AS `Habitaciones`,
  `reserva`.`Deposito` AS `Deposito`,
  `pais`.`Nombre` AS `Pais`,
  `reserva_tipo`.`Nombre` AS `Tipo`,
  `reserva_estado`.`Nombre` AS `Estado`,
  (SELECT
      COUNT(0) AS `expr1`
    FROM (`reserva_casa` `rs`
      JOIN `reserva` `r`
        ON ((`rs`.`IdReserva` = `r`.`IdReserva`)))
    WHERE (`r`.`IdReserva` = `reserva`.`IdReserva`)) AS `Casas`
FROM ((((`reserva`
  JOIN `pais`
    ON ((`reserva`.`IdPais` = `pais`.`IdPais`)))
  JOIN `reserva_tipo`
    ON ((`reserva`.`IdReservaTipo` = `reserva_tipo`.`IdReservaTipo`)))
  JOIN `reserva_estado`
    ON ((`reserva`.`IdReservaEstado` = `reserva_estado`.`IdReservaEstado`)))
  JOIN `operador`
    ON ((`reserva`.`IdOperador` = `operador`.`IdOperador`)));

--
-- Definition for view view_resevas_inform
--
CREATE OR REPLACE
DEFINER = 'root'@'localhost'
VIEW view_resevas_inform
AS
SELECT
  `reserva`.`IdReserva` AS `IdReserva`,
  `reserva`.`Nombre` AS `Nombre`,
  `reserva`.`Correo` AS `Correo`,
  `reserva`.`FechaEntrada` AS `Entrada`,
  (`reserva`.`FechaEntrada` + INTERVAL `reserva`.`Noches` DAY) AS `Salida`,
  `reserva`.`Noches` AS `Noches`,
  `reserva`.`Personas` AS `Personas`,
  `reserva`.`Habitaciones` AS `Habitaciones`,
  `reserva`.`VueloInfo` AS `VueloInfo`,
  `reserva`.`IdReservaTipo` AS `Tipo`,
  `pais`.`Nombre` AS `Pais`
FROM (`reserva`
  JOIN `pais`
    ON ((`reserva`.`IdPais` = `pais`.`IdPais`)));

-- 
-- Dumping data for table operador
--
INSERT INTO operador VALUES
(1, 'Chinea', 'chine', 'chinea@gmail.com', '7 835 6141', 31, 50.00);

-- 
-- Dumping data for table reserva_estado
--
INSERT INTO reserva_estado VALUES
(1, 'Iniciada'),
(2, 'En proceso'),
(3, 'Tramitada'),
(4, 'En Curso'),
(5, 'Concluida'),
(6, 'Cobrada'),
(7, 'Cancelada');

-- 
-- Dumping data for table reserva_tipo
--
INSERT INTO reserva_tipo VALUES
(1, 'Casas'),
(2, 'Turs');

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;